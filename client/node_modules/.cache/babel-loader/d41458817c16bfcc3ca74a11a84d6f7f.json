{"ast":null,"code":"export const getAccessToken = () => {\n  return sessionStorage.getItem(\"accessToken\");\n};\nexport const getRefreshToken = () => {\n  return sessionStorage.getItem(\"refreshToken\");\n};\nexport const setAccessToken = accessToken => {\n  sessionStorage.setItem(\"accessToken\", `Bearer ${accessToken}`);\n};\nexport const setRefreshToken = refreshToken => {\n  sessionStorage.setItem(\"refreshToken\", `Bearer ${refreshToken}`);\n};\n\n// function allows to construct an object based on the nature of the operation (params or query) and the provided data.\nexport const getType = (value, body) => {\n  if (value.params) {\n    return {\n      params: body\n    };\n  } else if (value.query) {\n    if (typeof body === \"object\") {\n      return {\n        query: body._id\n      };\n    } else {\n      return {\n        query: body\n      };\n    }\n  }\n  return {};\n};\n\n/*\r\nUse Case Scenarios:\r\n\r\nScenario 1 (params):\r\n\r\nIf you want to provide specific instructions or parameters for an operation, you might use value.params. For example, if you're updating a user and need to send user data, value.params could be set to true.\r\n\r\nScenario 2 (query):\r\n\r\nIf you're querying or asking the system for information, you might use value.query. For example, if you want to get details about a specific entity identified by an ID, you could set value.query to true.\r\n*/","map":{"version":3,"names":["getAccessToken","sessionStorage","getItem","getRefreshToken","setAccessToken","accessToken","setItem","setRefreshToken","refreshToken","getType","value","body","params","query","_id"],"sources":["C:/MERN-Stack-Projects/Blog-Website/client/src/utils/common-utils.js"],"sourcesContent":["export const getAccessToken = () => {\r\n  return sessionStorage.getItem(\"accessToken\");\r\n};\r\n\r\nexport const getRefreshToken = () => {\r\n  return sessionStorage.getItem(\"refreshToken\");\r\n};\r\n\r\nexport const setAccessToken = (accessToken) => {\r\n  sessionStorage.setItem(\"accessToken\", `Bearer ${accessToken}`);\r\n};\r\n\r\nexport const setRefreshToken = (refreshToken) => {\r\n  sessionStorage.setItem(\"refreshToken\", `Bearer ${refreshToken}`);\r\n};\r\n\r\n// function allows to construct an object based on the nature of the operation (params or query) and the provided data.\r\nexport const getType = (value, body) => {\r\n  if (value.params) {\r\n    return { params: body };\r\n  } else if (value.query) {\r\n    if (typeof body === \"object\") {\r\n      return { query: body._id };\r\n    } else {\r\n      return { query: body };\r\n    }\r\n  }\r\n  return {};\r\n};\r\n\r\n/*\r\nUse Case Scenarios:\r\n\r\nScenario 1 (params):\r\n\r\nIf you want to provide specific instructions or parameters for an operation, you might use value.params. For example, if you're updating a user and need to send user data, value.params could be set to true.\r\n\r\nScenario 2 (query):\r\n\r\nIf you're querying or asking the system for information, you might use value.query. For example, if you want to get details about a specific entity identified by an ID, you could set value.query to true.\r\n*/\r\n"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAGA,CAAA,KAAM;EAClC,OAAOC,cAAc,CAACC,OAAO,CAAC,aAAa,CAAC;AAC9C,CAAC;AAED,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EACnC,OAAOF,cAAc,CAACC,OAAO,CAAC,cAAc,CAAC;AAC/C,CAAC;AAED,OAAO,MAAME,cAAc,GAAIC,WAAW,IAAK;EAC7CJ,cAAc,CAACK,OAAO,CAAC,aAAa,EAAG,UAASD,WAAY,EAAC,CAAC;AAChE,CAAC;AAED,OAAO,MAAME,eAAe,GAAIC,YAAY,IAAK;EAC/CP,cAAc,CAACK,OAAO,CAAC,cAAc,EAAG,UAASE,YAAa,EAAC,CAAC;AAClE,CAAC;;AAED;AACA,OAAO,MAAMC,OAAO,GAAGA,CAACC,KAAK,EAAEC,IAAI,KAAK;EACtC,IAAID,KAAK,CAACE,MAAM,EAAE;IAChB,OAAO;MAAEA,MAAM,EAAED;IAAK,CAAC;EACzB,CAAC,MAAM,IAAID,KAAK,CAACG,KAAK,EAAE;IACtB,IAAI,OAAOF,IAAI,KAAK,QAAQ,EAAE;MAC5B,OAAO;QAAEE,KAAK,EAAEF,IAAI,CAACG;MAAI,CAAC;IAC5B,CAAC,MAAM;MACL,OAAO;QAAED,KAAK,EAAEF;MAAK,CAAC;IACxB;EACF;EACA,OAAO,CAAC,CAAC;AACX,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}