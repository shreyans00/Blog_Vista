{"ast":null,"code":"import axios from \"axios\";\nimport { API_NOTIFICATION_MESSAGES, SERVICE_URLS } from \"../constants/config\";\nimport { getAccessToken,\n//   getRefreshToken,\n//   setAccessToken,\ngetType } from \"../utils/common-utils\";\nconst API_URL = \"http://localhost:8000\";\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  timeout: 10000,\n  headers: {\n    \"content-type\": \"application/json\"\n  }\n});\naxiosInstance.interceptors.request.use(function (config) {\n  if (config.TYPE.params) {\n    config.params = config.TYPE.params;\n  } else if (config.TYPE.query) {\n    config.url = config.url + \"/\" + config.TYPE.query;\n  }\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\naxiosInstance.interceptors.response.use(function (response) {\n  // Stop global loader here\n  return processResponse(response);\n}, function (error) {\n  // Stop global loader here\n  return Promise.reject(ProcessError(error));\n});\n\n///////////////////////////////\n// If success -> returns { isSuccess: true, data: object }\n// If fail -> returns { isFailure: true, status: string, msg: string, code: int }\n//////////////////////////////\nconst processResponse = response => {\n  if ((response === null || response === void 0 ? void 0 : response.status) === 200) {\n    return {\n      isSuccess: true,\n      data: response.data\n    };\n  } else {\n    return {\n      isFailure: true,\n      status: response === null || response === void 0 ? void 0 : response.status,\n      msg: response === null || response === void 0 ? void 0 : response.msg,\n      code: response === null || response === void 0 ? void 0 : response.code\n    };\n  }\n};\n\n///////////////////////////////\n// If success -> returns { isSuccess: true, data: object }\n// If fail -> returns { isError: true, status: string, msg: string, code: int }\n//////////////////////////////\nconst ProcessError = async error => {\n  if (error.response) {\n    var _error$response;\n    // Request made and server responded with a status code\n    // that falls out of the range of 2xx\n    if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 403) {\n      // const { url, config } = error.response;\n      // console.log(error);\n      // try {\n      //     let response = await API.getRefreshToken({ token: getRefreshToken() });\n      //     if (response.isSuccess) {\n      sessionStorage.clear();\n      //         setAccessToken(response.data.accessToken);\n\n      //         const requestData = error.toJSON();\n\n      //         let response1 = await axios({\n      //             method: requestData.config.method,\n      //             url: requestData.config.baseURL + requestData.config.url,\n      //             headers: { \"content-type\": \"application/json\", \"authorization\": getAccessToken() },\n      //             params: requestData.config.params\n      //         });\n      //     }\n      // } catch (error) {\n      //     return Promise.reject(error)\n      // }\n    } else {\n      console.log(\"ERROR IN RESPONSE: \", error.toJSON());\n      return {\n        isError: true,\n        msg: API_NOTIFICATION_MESSAGES.responseFailure,\n        code: error.response.status\n      };\n    }\n  } else if (error.request) {\n    // The request was made but no response was received\n    console.log(\"ERROR IN RESPONSE: \", error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.requestFailure,\n      code: \"\"\n    };\n  } else {\n    // Something happened in setting up the request that triggered an Error\n    console.log(\"ERROR IN RESPONSE: \", error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.networkError,\n      code: \"\"\n    };\n  }\n};\n_c = ProcessError;\nconst API = {};\nfor (const [key, value] of Object.entries(SERVICE_URLS)) {\n  API[key] = (body, showUploadProgress, showDownloadProgress) => axiosInstance({\n    method: value.method,\n    url: value.url,\n    data: value.method === \"DELETE\" ? \"\" : body,\n    responseType: value.responseType,\n    headers: {\n      authorization: getAccessToken()\n    },\n    TYPE: getType(value, body),\n    onUploadProgress: function (progressEvent) {\n      if (showUploadProgress) {\n        let percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        showUploadProgress(percentCompleted);\n      }\n    },\n    onDownloadProgress: function (progressEvent) {\n      if (showDownloadProgress) {\n        let percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        showDownloadProgress(percentCompleted);\n      }\n    }\n  });\n}\nexport { API };\nvar _c;\n$RefreshReg$(_c, \"ProcessError\");","map":{"version":3,"names":["axios","API_NOTIFICATION_MESSAGES","SERVICE_URLS","getAccessToken","getType","API_URL","axiosInstance","create","baseURL","timeout","headers","interceptors","request","use","config","TYPE","params","query","url","error","Promise","reject","response","processResponse","ProcessError","status","isSuccess","data","isFailure","msg","code","_error$response","sessionStorage","clear","console","log","toJSON","isError","responseFailure","requestFailure","networkError","_c","API","key","value","Object","entries","body","showUploadProgress","showDownloadProgress","method","responseType","authorization","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","onDownloadProgress","$RefreshReg$"],"sources":["C:/MERN-Stack-Projects/Blog-Website/client/src/service/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nimport { API_NOTIFICATION_MESSAGES, SERVICE_URLS } from \"../constants/config\";\r\nimport {\r\n  getAccessToken,\r\n  //   getRefreshToken,\r\n  //   setAccessToken,\r\n  getType,\r\n} from \"../utils/common-utils\";\r\n\r\nconst API_URL = \"http://localhost:8000\";\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: API_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    \"content-type\": \"application/json\",\r\n  },\r\n});\r\n\r\naxiosInstance.interceptors.request.use(\r\n  function (config) {\r\n    if (config.TYPE.params) {\r\n      config.params = config.TYPE.params;\r\n    } else if (config.TYPE.query) {\r\n      config.url = config.url + \"/\" + config.TYPE.query;\r\n    }\r\n    return config;\r\n  },\r\n  function (error) {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\naxiosInstance.interceptors.response.use(\r\n  function (response) {\r\n    // Stop global loader here\r\n    return processResponse(response);\r\n  },\r\n  function (error) {\r\n    // Stop global loader here\r\n    return Promise.reject(ProcessError(error));\r\n  }\r\n);\r\n\r\n///////////////////////////////\r\n// If success -> returns { isSuccess: true, data: object }\r\n// If fail -> returns { isFailure: true, status: string, msg: string, code: int }\r\n//////////////////////////////\r\nconst processResponse = (response) => {\r\n  if (response?.status === 200) {\r\n    return { isSuccess: true, data: response.data };\r\n  } else {\r\n    return {\r\n      isFailure: true,\r\n      status: response?.status,\r\n      msg: response?.msg,\r\n      code: response?.code,\r\n    };\r\n  }\r\n};\r\n\r\n///////////////////////////////\r\n// If success -> returns { isSuccess: true, data: object }\r\n// If fail -> returns { isError: true, status: string, msg: string, code: int }\r\n//////////////////////////////\r\nconst ProcessError = async (error) => {\r\n  if (error.response) {\r\n    // Request made and server responded with a status code\r\n    // that falls out of the range of 2xx\r\n    if (error.response?.status === 403) {\r\n      // const { url, config } = error.response;\r\n      // console.log(error);\r\n      // try {\r\n      //     let response = await API.getRefreshToken({ token: getRefreshToken() });\r\n      //     if (response.isSuccess) {\r\n      sessionStorage.clear();\r\n      //         setAccessToken(response.data.accessToken);\r\n\r\n      //         const requestData = error.toJSON();\r\n\r\n      //         let response1 = await axios({\r\n      //             method: requestData.config.method,\r\n      //             url: requestData.config.baseURL + requestData.config.url,\r\n      //             headers: { \"content-type\": \"application/json\", \"authorization\": getAccessToken() },\r\n      //             params: requestData.config.params\r\n      //         });\r\n      //     }\r\n      // } catch (error) {\r\n      //     return Promise.reject(error)\r\n      // }\r\n    } else {\r\n      console.log(\"ERROR IN RESPONSE: \", error.toJSON());\r\n      return {\r\n        isError: true,\r\n        msg: API_NOTIFICATION_MESSAGES.responseFailure,\r\n        code: error.response.status,\r\n      };\r\n    }\r\n  } else if (error.request) {\r\n    // The request was made but no response was received\r\n    console.log(\"ERROR IN RESPONSE: \", error.toJSON());\r\n    return {\r\n      isError: true,\r\n      msg: API_NOTIFICATION_MESSAGES.requestFailure,\r\n      code: \"\",\r\n    };\r\n  } else {\r\n    // Something happened in setting up the request that triggered an Error\r\n    console.log(\"ERROR IN RESPONSE: \", error.toJSON());\r\n    return {\r\n      isError: true,\r\n      msg: API_NOTIFICATION_MESSAGES.networkError,\r\n      code: \"\",\r\n    };\r\n  }\r\n};\r\n\r\nconst API = {};\r\n\r\nfor (const [key, value] of Object.entries(SERVICE_URLS)) {\r\n  API[key] = (body, showUploadProgress, showDownloadProgress) =>\r\n    axiosInstance({\r\n      method: value.method,\r\n      url: value.url,\r\n      data: value.method === \"DELETE\" ? \"\" : body,\r\n      responseType: value.responseType,\r\n      headers: {\r\n        authorization: getAccessToken(),\r\n      },\r\n      TYPE: getType(value, body),\r\n      onUploadProgress: function (progressEvent) {\r\n        if (showUploadProgress) {\r\n          let percentCompleted = Math.round(\r\n            (progressEvent.loaded * 100) / progressEvent.total\r\n          );\r\n          showUploadProgress(percentCompleted);\r\n        }\r\n      },\r\n      onDownloadProgress: function (progressEvent) {\r\n        if (showDownloadProgress) {\r\n          let percentCompleted = Math.round(\r\n            (progressEvent.loaded * 100) / progressEvent.total\r\n          );\r\n          showDownloadProgress(percentCompleted);\r\n        }\r\n      },\r\n    });\r\n}\r\n\r\nexport { API };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}