[{"C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\index.js":"1","C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\components\\home\\Home.jsx":"2","C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\components\\header\\Header.jsx":"3","C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\components\\details\\DetailView.jsx":"4","C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\components\\contact\\Contact.jsx":"5","C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\service\\api.js":"6","C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\components\\home\\Categories.jsx":"7","C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\components\\banner\\Banner.jsx":"8","C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\components\\details\\comments\\Comments.jsx":"9","C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\components\\home\\post\\Posts.jsx":"10","C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\utils\\common-utils.js":"11","C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\constants\\config.js":"12","C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\constants\\data.js":"13","C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\components\\home\\post\\Post.jsx":"14","C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\components\\details\\comments\\Comment.jsx":"15","C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\App.js":"16","C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\components\\about\\About.jsx":"17","C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\components\\account\\Login.jsx":"18","C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\components\\create\\CreatePost.jsx":"19","C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\components\\create\\Update.jsx":"20","C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\context\\DataProvider.js":"21"},{"size":230,"mtime":1703935637310,"results":"22","hashOfConfig":"23"},{"size":493,"mtime":1703935870166,"results":"24","hashOfConfig":"23"},{"size":1073,"mtime":1704116882920,"results":"25","hashOfConfig":"23"},{"size":3115,"mtime":1703882092724,"results":"26","hashOfConfig":"23"},{"size":1482,"mtime":1704116749659,"results":"27","hashOfConfig":"23"},{"size":4210,"mtime":1704054828569,"results":"28","hashOfConfig":"23"},{"size":1993,"mtime":1704186755297,"results":"29","hashOfConfig":"23"},{"size":1165,"mtime":1704060236541,"results":"30","hashOfConfig":"23"},{"size":2645,"mtime":1703882092725,"results":"31","hashOfConfig":"23"},{"size":1220,"mtime":1704186656737,"results":"32","hashOfConfig":"23"},{"size":1328,"mtime":1704049642237,"results":"33","hashOfConfig":"23"},{"size":1520,"mtime":1704017960341,"results":"34","hashOfConfig":"23"},{"size":193,"mtime":1704105018686,"results":"35","hashOfConfig":"23"},{"size":1387,"mtime":1704186642776,"results":"36","hashOfConfig":"23"},{"size":1376,"mtime":1703882092725,"results":"37","hashOfConfig":"23"},{"size":2753,"mtime":1703962323354,"results":"38","hashOfConfig":"23"},{"size":3431,"mtime":1704115536219,"results":"39","hashOfConfig":"23"},{"size":6163,"mtime":1704107672615,"results":"40","hashOfConfig":"23"},{"size":4062,"mtime":1704186772882,"results":"41","hashOfConfig":"23"},{"size":3414,"mtime":1704184979784,"results":"42","hashOfConfig":"23"},{"size":418,"mtime":1703883302648,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1u3ci6b",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\index.js",[],["91","92"],"C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\components\\home\\Home.jsx",[],"C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\components\\header\\Header.jsx",[],"C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\components\\details\\DetailView.jsx",["93"],"import { useState, useEffect, useContext } from 'react';\r\n\r\nimport { Box, Typography, styled } from '@mui/material';\r\nimport { Delete, Edit } from '@mui/icons-material';\r\nimport { Link, useNavigate, useParams } from 'react-router-dom'\r\n\r\nimport { API } from '../../service/api';\r\n\r\nimport { DataContext } from '../../context/DataProvider';\r\n\r\n// components\r\nimport Comments from './comments/Comments';\r\n\r\nconst Container = styled(Box)(({ theme }) => ({\r\n    margin: '50px 100px',\r\n    [theme.breakpoints.down('md')]: {\r\n        margin: 0\r\n    },\r\n}));\r\n\r\nconst Image = styled('img')({\r\n    width: '100%',\r\n    height: '50vh',\r\n    objectFit: 'cover'\r\n});\r\n\r\nconst EditIcon = styled(Edit)`\r\n    margin: 5px;\r\n    padding: 5px;\r\n    border: 1px solid #878787;\r\n    border-radius: 10px;\r\n`;\r\n\r\nconst DeleteIcon = styled(Delete)`\r\n    margin: 5px;\r\n    padding: 5px;\r\n    border: 1px solid #878787;\r\n    border-radius: 10px;\r\n`;\r\n\r\nconst Heading = styled(Typography)`\r\n    font-size: 38px;\r\n    font-weight: 600;\r\n    text-align: center;\r\n    margin: 50px 0 10px 0;\r\n`;\r\n\r\nconst Author = styled(Box)(({ theme }) => ({\r\n    color: '#878787',\r\n    display: 'flex',\r\n    margin: '20px 0',\r\n    [theme.breakpoints.down('sm')]: {\r\n        display: 'block'\r\n    },\r\n}));\r\n\r\nconst DetailView = () => {\r\n    const url = 'https://images.unsplash.com/photo-1543128639-4cb7e6eeef1b?ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8bGFwdG9wJTIwc2V0dXB8ZW58MHx8MHx8&ixlib=rb-1.2.1&w=1000&q=80';\r\n    \r\n    const [post, setPost] = useState({});\r\n    const { account } = useContext(DataContext);\r\n\r\n    const navigate = useNavigate();\r\n    const { id } = useParams();\r\n    \r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            let response = await API.getPostById(id);\r\n            if (response.isSuccess) {\r\n                setPost(response.data);\r\n            }\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    const deleteBlog = async () => {  \r\n        await API.deletePost(post._id);\r\n        navigate('/')\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Image src={post.picture || url} alt=\"post\" />\r\n            <Box style={{ float: 'right' }}>\r\n                {   \r\n                    account.username === post.username && \r\n                    <>  \r\n                        <Link to={`/update/${post._id}`}><EditIcon color=\"primary\" /></Link>\r\n                        <DeleteIcon onClick={() => deleteBlog()} color=\"error\" />\r\n                    </>\r\n                }\r\n            </Box>\r\n            <Heading>{post.title}</Heading>\r\n\r\n            <Author>\r\n                <Link to={`/?username=${post.username}`} style={{ textDecoration: 'none', color: 'inherit' }}>\r\n                    <Typography>Author: <span style={{fontWeight: 600}}>{post.username}</span></Typography>\r\n                </Link>\r\n                <Typography style={{marginLeft: 'auto'}}>{new Date(post.createdDate).toDateString()}</Typography>\r\n            </Author>\r\n\r\n            <Typography>{post.description}</Typography>\r\n            <Comments post={post} />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default DetailView;","C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\components\\contact\\Contact.jsx",[],"C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\service\\api.js",["94","95"],"import axios from \"axios\";\r\n\r\nimport { API_NOTIFICATION_MESSAGES, SERVICE_URLS } from \"../constants/config\";\r\nimport {\r\n  getAccessToken,\r\n  getRefreshToken,\r\n  setAccessToken,\r\n  getType,\r\n} from \"../utils/common-utils\";\r\n\r\nconst API_URL = \"http://localhost:8000\";\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: API_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    \"content-type\": \"application/json\",\r\n  },\r\n});\r\n\r\n// Axios interceptors are functions that run for every request or response before the request or response is handled by then or catch. In this case, the request interceptor is added to the axiosInstance. The interceptor function takes two arguments: config and error.\r\naxiosInstance.interceptors.request.use(\r\n  function (config) {\r\n    if (config.TYPE.params) {\r\n      config.params = config.TYPE.params; //useful for adding parameters to the request.\r\n    } else if (config.TYPE.query) {\r\n      config.url = config.url + \"/\" + config.TYPE.query; //useful for adding a query string to the URL.\r\n    }\r\n    return config;\r\n  },\r\n  function (error) {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\naxiosInstance.interceptors.response.use(\r\n  function (response) {\r\n    // if http request successful, Stop global loader here\r\n    return processResponse(response);\r\n  },\r\n  function (error) {\r\n    // Stop global loader here\r\n    return Promise.reject(ProcessError(error));\r\n  }\r\n);\r\n\r\n//////////////////////////////\r\n// If success -> returns { isSuccess: true, data: object }\r\n// If fail -> returns { isFailure: true, status: string, msg: string, code: int }\r\n//////////////////////////////\r\nconst processResponse = (response) => {\r\n  if (response?.status === 200) {\r\n    // If response is not null or undefined, it will access the status propert, else evaluate to undefined, not give error.\r\n    return { isSuccess: true, data: response.data };\r\n  } else {\r\n    return {\r\n      isFailure: true,\r\n      status: response?.status,\r\n      msg: response?.msg,\r\n      code: response?.code,\r\n    };\r\n  }\r\n};\r\n\r\n///////////////////////////////\r\n// If success -> returns { isSuccess: true, data: object }\r\n// If fail -> returns { isError: true, status: string, msg: string, code: int }\r\n//////////////////////////////\r\nconst ProcessError = async (error) => {\r\n  if (error.response) {\r\n    if (error.response?.status === 403) {\r\n      sessionStorage.clear();\r\n    } else {\r\n      console.log(\"ERROR IN RESPONSE: \", error.toJSON());\r\n      return {\r\n        isError: true,\r\n        msg: API_NOTIFICATION_MESSAGES.responseFailure,\r\n        code: error.response.status,\r\n      };\r\n    }\r\n  } else if (error.request) {\r\n    // The request was made but no response was received\r\n    console.log(\"ERROR IN RESPONSE: \", error.toJSON());\r\n    return {\r\n      isError: true,\r\n      msg: API_NOTIFICATION_MESSAGES.requestFailure,\r\n      code: \"\",\r\n    };\r\n  } else {\r\n    // Something happened in setting up the request that triggered an Error\r\n    console.log(\"ERROR IN RESPONSE: \", error.toJSON());\r\n    return {\r\n      isError: true,\r\n      msg: API_NOTIFICATION_MESSAGES.networkError,\r\n      code: \"\",\r\n    };\r\n  }\r\n};\r\n\r\nconst API = {};\r\n\r\nfor (const [key, value] of Object.entries(SERVICE_URLS)) {\r\n  // iterate through all key-value pairs of service urls (config.js file)\r\n  API[key] = (body, showUploadProgress, showDownloadProgress) =>\r\n    axiosInstance({\r\n      method: value.method,\r\n      url: value.url,\r\n      data: value.method === \"DELETE\" ? \"\" : body,\r\n      responseType: value.responseType,\r\n      headers: {\r\n        authorization: getAccessToken(),\r\n      },\r\n      TYPE: getType(value, body),\r\n      onUploadProgress: function (progressEvent) {\r\n        if (showUploadProgress) {\r\n          let percentCompleted = Math.round(\r\n            (progressEvent.loaded * 100) / progressEvent.total\r\n          );\r\n          showUploadProgress(percentCompleted);\r\n        }\r\n      },\r\n      onDownloadProgress: function (progressEvent) {\r\n        if (showDownloadProgress) {\r\n          let percentCompleted = Math.round(\r\n            (progressEvent.loaded * 100) / progressEvent.total\r\n          );\r\n          showDownloadProgress(percentCompleted);\r\n        }\r\n      },\r\n    });\r\n}\r\n\r\nexport { API };\r\n","C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\components\\home\\Categories.jsx",[],"C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\components\\banner\\Banner.jsx",[],"C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\components\\details\\comments\\Comments.jsx",[],"C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\components\\home\\post\\Posts.jsx",[],"C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\utils\\common-utils.js",[],"C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\constants\\config.js",[],"C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\constants\\data.js",[],"C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\components\\home\\post\\Post.jsx",[],"C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\components\\details\\comments\\Comment.jsx",[],"C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\App.js",[],"C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\components\\about\\About.jsx",[],"C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\components\\account\\Login.jsx",[],"C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\components\\create\\CreatePost.jsx",["96","97","98"],"import React, { useState, useEffect, useContext } from \"react\";\r\n\r\nimport {\r\n  styled,\r\n  Box,\r\n  TextareaAutosize,\r\n  Button,\r\n  InputBase,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n  InputLabel,\r\n} from \"@mui/material\";\r\nimport { AddCircle as Add } from \"@mui/icons-material\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\n\r\nimport { API } from \"../../service/api\";\r\nimport { DataContext } from \"../../context/DataProvider\";\r\nimport { categories } from \"../../constants/data.js\";\r\n\r\nconst Container = styled(Box)(({ theme }) => ({\r\n  margin: \"50px 100px\",\r\n  [theme.breakpoints.down(\"md\")]: {\r\n    margin: 0,\r\n  },\r\n}));\r\n\r\nconst Image = styled(\"img\")({\r\n  width: \"100%\",\r\n  height: \"50vh\",\r\n  objectFit: \"cover\",\r\n});\r\n\r\nconst StyledFormControl = styled(FormControl)`\r\n  margin-top: 10px;\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\n\r\nconst InputTextField = styled(InputBase)`\r\n  flex: 1;\r\n  margin: 0 30px;\r\n  font-size: 25px;\r\n`;\r\n\r\nconst Textarea = styled(TextareaAutosize)`\r\n  width: 100%;\r\n  border: none;\r\n  margin-top: 50px;\r\n  font-size: 18px;\r\n  &:focus-visible {\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nconst CategorySelect = styled(Select)`\r\n  min-width: 150px;\r\n`;\r\n\r\nconst initialPost = {\r\n  title: \"\",\r\n  description: \"\",\r\n  picture: \"\",\r\n  username: \"\",\r\n  category: \"\",\r\n  createdDate: new Date(),\r\n};\r\n\r\nconst CreatePost = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  const [post, setPost] = useState(initialPost);\r\n  const [file, setFile] = useState(\"\");\r\n  const { account } = useContext(DataContext);\r\n\r\n  const url = post.picture\r\n    ? post.picture\r\n    : \"https://images.unsplash.com/photo-1543128639-4cb7e6eeef1b?ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8bGFwdG9wJTIwc2V0dXB8ZW58MHx8MHx8&ixlib=rb-1.2.1&w=1000&q=80\";\r\n\r\n  useEffect(() => {\r\n    const getImage = async () => {\r\n      if (file) {\r\n        console.log(\"file is: \", file);\r\n        const data = new FormData();\r\n        data.append(\"name\", file.name);\r\n        data.append(\"file\", file);\r\n        try {\r\n          const response = await API.uploadFile(data);\r\n          post.picture = response.data;\r\n        } catch (err) {\r\n          console.log(\"Error uploading file: \", err);\r\n        }\r\n      }\r\n    };\r\n    getImage();\r\n    post.category =\r\n      categories.find((cat) => cat.type === post.category)?.id || \"\"; // Update category based on its id\r\n    post.username = account.username;\r\n    // console.log(\"post is \", post);\r\n  }, [file]);\r\n\r\n  const savePost = async () => {\r\n    await API.createPost(post);\r\n    navigate(\"/\");\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setPost({ ...post, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Image src={url} alt=\"post\" />\r\n\r\n      <StyledFormControl>\r\n        <label htmlFor=\"fileInput\">\r\n          <Add fontSize=\"large\" color=\"action\" />\r\n        </label>\r\n        <input\r\n          type=\"file\"\r\n          id=\"fileInput\"\r\n          style={{ display: \"none\" }}\r\n          onChange={(e) => {\r\n            console.log(\"file is here \", e.target.files[0]);\r\n            setFile(e.target.files[0]);\r\n          }}\r\n        />\r\n        <InputTextField\r\n          onChange={(e) => handleChange(e)}\r\n          name=\"title\"\r\n          placeholder=\"Title\"\r\n        />\r\n        <CategorySelect\r\n          value={post.category}\r\n          onChange={(e) => handleChange(e)}\r\n          name=\"category\"\r\n        >\r\n          <MenuItem value=\"\" disabled>\r\n            Select Category\r\n          </MenuItem>\r\n          {categories.map((cat) => (\r\n            <MenuItem key={cat.id} value={cat.type}>\r\n              {cat.type}\r\n            </MenuItem>\r\n          ))}\r\n        </CategorySelect>\r\n        <Button onClick={() => savePost()} variant=\"contained\" color=\"primary\">\r\n          Publish\r\n        </Button>\r\n      </StyledFormControl>\r\n\r\n      <Textarea\r\n        rowsMin={5}\r\n        placeholder=\"Tell your story...\"\r\n        name=\"description\"\r\n        onChange={(e) => handleChange(e)}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CreatePost;\r\n","C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\components\\create\\Update.jsx",["99","100","101"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport {\r\n  Box,\r\n  styled,\r\n  TextareaAutosize,\r\n  Button,\r\n  FormControl,\r\n  InputBase,\r\n} from \"@mui/material\";\r\nimport { AddCircle as Add } from \"@mui/icons-material\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\nimport { API } from \"../../service/api\";\r\n\r\nconst Container = styled(Box)(({ theme }) => ({\r\n  margin: \"50px 100px\",\r\n  [theme.breakpoints.down(\"md\")]: {\r\n    margin: 0,\r\n  },\r\n}));\r\n\r\nconst Image = styled(\"img\")({\r\n  width: \"100%\",\r\n  height: \"50vh\",\r\n  objectFit: \"cover\",\r\n});\r\n\r\nconst StyledFormControl = styled(FormControl)`\r\n  margin-top: 10px;\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\n\r\nconst InputTextField = styled(InputBase)`\r\n  flex: 1;\r\n  margin: 0 30px;\r\n  font-size: 25px;\r\n`;\r\n\r\nconst StyledTextArea = styled(TextareaAutosize)`\r\n  width: 100%;\r\n  border: none;\r\n  margin-top: 50px;\r\n  font-size: 18px;\r\n  &:focus-visible {\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nconst initialPost = {\r\n  title: \"\",\r\n  description: \"\",\r\n  picture: \"\",\r\n  username: \"Blog_Vista\",\r\n  categories: \"All categories\",\r\n  createdDate: new Date(),\r\n};\r\n\r\nconst Update = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const [post, setPost] = useState(initialPost);\r\n  const [file, setFile] = useState(\"\");\r\n  const [imageURL, setImageURL] = useState(\"\");\r\n\r\n  const { id } = useParams();\r\n\r\n  const url =\r\n    \"https://images.unsplash.com/photo-1543128639-4cb7e6eeef1b?ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8bGFwdG9wJTIwc2V0dXB8ZW58MHx8MHx8&ixlib=rb-1.2.1&w=1000&q=80\";\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      let response = await API.getPostById(id);\r\n      if (response.isSuccess) {\r\n        setPost(response.data);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const getImage = async () => {\r\n      if (file) {\r\n        const data = new FormData();\r\n        data.append(\"name\", file.name);\r\n        data.append(\"file\", file);\r\n\r\n        const response = await API.uploadFile(data);\r\n        if (response.isSuccess) {\r\n          post.picture = response.data;\r\n          setImageURL(response.data);\r\n        }\r\n      }\r\n    };\r\n    getImage();\r\n  }, [file]);\r\n\r\n  const updateBlogPost = async () => {\r\n    await API.updatePost(post);\r\n    navigate(`/details/${id}`);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setPost({ ...post, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Image src={post.picture || url} alt=\"post\" />\r\n\r\n      <StyledFormControl>\r\n        <label htmlFor=\"fileInput\">\r\n          <Add fontSize=\"large\" color=\"action\" />\r\n        </label>\r\n        <input\r\n          type=\"file\"\r\n          id=\"fileInput\"\r\n          style={{ display: \"none\" }}\r\n          onChange={(e) => setFile(e.target.files[0])}\r\n        />\r\n        <InputTextField\r\n          onChange={(e) => handleChange(e)}\r\n          value={post.title}\r\n          name=\"title\"\r\n          placeholder=\"Title\"\r\n        />\r\n        <Button\r\n          onClick={() => updateBlogPost()}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          Update\r\n        </Button>\r\n      </StyledFormControl>\r\n\r\n      <StyledTextArea\r\n        rowsMin={5}\r\n        placeholder=\"Tell your story...\"\r\n        name=\"description\"\r\n        onChange={(e) => handleChange(e)}\r\n        value={post.description}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Update;\r\n","C:\\MERN-Stack-Projects\\Blog-Website\\client\\src\\context\\DataProvider.js",[],{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":74,"column":8,"nodeType":"108","endLine":74,"endColumn":10,"suggestions":"109"},{"ruleId":"110","severity":1,"message":"111","line":6,"column":3,"nodeType":"112","messageId":"113","endLine":6,"endColumn":18},{"ruleId":"110","severity":1,"message":"114","line":7,"column":3,"nodeType":"112","messageId":"113","endLine":7,"endColumn":17},{"ruleId":"110","severity":1,"message":"115","line":12,"column":3,"nodeType":"112","messageId":"113","endLine":12,"endColumn":13},{"ruleId":"110","severity":1,"message":"116","line":71,"column":9,"nodeType":"112","messageId":"113","endLine":71,"endColumn":17},{"ruleId":"106","severity":1,"message":"117","line":101,"column":6,"nodeType":"108","endLine":101,"endColumn":12,"suggestions":"118"},{"ruleId":"110","severity":1,"message":"119","line":65,"column":10,"nodeType":"112","messageId":"113","endLine":65,"endColumn":18},{"ruleId":"106","severity":1,"message":"107","line":80,"column":6,"nodeType":"108","endLine":80,"endColumn":8,"suggestions":"120"},{"ruleId":"106","severity":1,"message":"121","line":97,"column":6,"nodeType":"108","endLine":97,"endColumn":12,"suggestions":"122"},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["125"],"no-unused-vars","'getRefreshToken' is defined but never used.","Identifier","unusedVar","'setAccessToken' is defined but never used.","'InputLabel' is defined but never used.","'location' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'account.username' and 'post'. Either include them or remove the dependency array.",["126"],"'imageURL' is assigned a value but never used.",["127"],"React Hook useEffect has a missing dependency: 'post'. Either include it or remove the dependency array.",["128"],"no-global-assign","no-unsafe-negation",{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},{"desc":"129","fix":"133"},{"desc":"134","fix":"135"},"Update the dependencies array to be: [id]",{"range":"136","text":"137"},"Update the dependencies array to be: [account.username, file, post]",{"range":"138","text":"139"},{"range":"140","text":"137"},"Update the dependencies array to be: [file, post]",{"range":"141","text":"142"},[1894,1896],"[id]",[2466,2472],"[account.username, file, post]",[1758,1760],[2178,2184],"[file, post]"]